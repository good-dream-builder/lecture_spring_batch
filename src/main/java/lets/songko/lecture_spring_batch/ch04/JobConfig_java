package lets.songko.lecture_spring_batch.ch04;

import lets.songko.lecture_spring_batch.config.DataSourceConfig;
import lombok.RequiredArgsConstructor;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.support.JdbcTransactionManager;

@EnableBatchProcessing
@RequiredArgsConstructor
@Import(DataSourceConfig.class)
@Configuration
public class JobConfig {
    private final JobRepository jobRepository;
    private final JdbcTransactionManager transactionManager;

    @Bean
    public Job job() {
        System.out.println("▶ Job");
        return new JobBuilder("job", jobRepository)
                .incrementer(new RunIdIncrementer())
                .start(step())
                .build();
    }

    @Bean
    public Step step() {
        System.out.println("▶ step");
        return new StepBuilder("step", jobRepository)
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("step ran!");
                    return RepeatStatus.FINISHED;
                }, transactionManager)
                .build();
    }
}
